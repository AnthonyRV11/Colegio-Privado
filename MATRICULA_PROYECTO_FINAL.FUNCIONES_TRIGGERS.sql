USE MATRICULA_PROYECTO

-------------------------------------------------------------
/*8 FUNCIONES*/

--1
/*VERIFICA LA EXISTENCIA DE UN ESTUDIANTE*/
GO
CREATE FUNCTION BUSCAR_ESTUDIANTE(@CARNET VARCHAR(15))
RETURNS INT AS
BEGIN
	DECLARE @ENCONTRADO INT 
	IF (EXISTS(SELECT 1 FROM ESTUDIANTES WHERE CARNET_ESTUDIANTE = @CARNET))
		SET @ENCONTRADO = 1
	ELSE
		SET @ENCONTRADO = 0
	RETURN @ENCONTRADO
END
GO
--2
/*VERIFICA LA EXISTENCIA DE UN PROFESOR*/
GO
CREATE FUNCTION BUSCAR_PROFESOR(@ID_PROF VARCHAR(20))
RETURNS INT AS
BEGIN
	DECLARE @ENCONTRADO INT 
	IF (NOT EXISTS(SELECT 1 FROM PROFESORES WHERE ID_PROFESOR = @ID_PROF))
		SET @ENCONTRADO = 0
	ELSE
		SET @ENCONTRADO = 1
	RETURN @ENCONTRADO
END
GO
--3
/*VERIFICA LA EXISTENCIA DE UNA CARRERA*/
GO
CREATE FUNCTION BUSCAR_CARRERA(@COD_CARRERA VARCHAR(20))
RETURNS INT AS
BEGIN
	DECLARE @ENCONTRADO INT 
	IF (NOT EXISTS(SELECT 1 FROM CARRERAS WHERE COD_CARRERA = @COD_CARRERA))
		SET @ENCONTRADO = 0
	ELSE
		SET @ENCONTRADO = 1
	RETURN @ENCONTRADO
END
GO
--4
/*VERIFICA LA EXISTENCIA DE UN MODULO*/
GO
CREATE FUNCTION BUSCAR_MODULO(@COD_MODULO VARCHAR(15))
RETURNS INT AS
BEGIN
	DECLARE @ENCONTRADO INT 
	IF (NOT EXISTS(SELECT 1 FROM MODULOS WHERE COD_MODULO = @COD_MODULO))
		SET @ENCONTRADO = 0
	ELSE
		SET @ENCONTRADO = 1
	RETURN @ENCONTRADO
END
GO
--5
/*VERIFICA LA EXISTENCIA DE UN LABORATORIO*/
GO
CREATE FUNCTION BUSCAR_LAB(@COD_LAB VARCHAR(15))
RETURNS INT AS
BEGIN
	DECLARE @ENCONTRADO INT 
	IF (NOT EXISTS(SELECT 1 FROM LABORATORIOS WHERE ID_LAB = @COD_LAB))
		SET @ENCONTRADO = 0
	ELSE
		SET @ENCONTRADO = 1
	RETURN @ENCONTRADO
END
GO

--6
/*VERIFICA SI UN PROFESOR PUEDE O NO IMPARTIR UNA CARRERA*/
GO
CREATE FUNCTION COMPROBANDO_PROF(@COD_CERT VARCHAR(30), @ID_PROFESOR VARCHAR(20))
RETURNS INT AS
BEGIN
	DECLARE @ENCONTRADO INT 
	IF (EXISTS(SELECT 1 FROM CERTIFICADOS_PROF WHERE COD_CERTIFICACIONES = @COD_CERT AND ID_PROFESOR = @ID_PROFESOR))
		SET @ENCONTRADO = 1
	ELSE
		SET @ENCONTRADO = 0
	RETURN @ENCONTRADO
END
GO 
	
--7
/*COMPRUEBA SI QUEDAN CUPOS DISPONIBLES EN UNA CARRERA*/
GO
CREATE FUNCTION COMPROBANDO_CUPOS_CARRERA(@COD_CARRERA VARCHAR(20))
RETURNS INT AS
BEGIN
	DECLARE @DISPONIBLE INT 
	IF (EXISTS (SELECT 1 FROM CARRERAS WHERE COD_CARRERA = @COD_CARRERA ))
		IF 1<= (SELECT CUPOS FROM CARRERAS WHERE COD_CARRERA = @COD_CARRERA)
		SET @DISPONIBLE = 1
	ELSE 
		SET @DISPONIBLE = 0
	RETURN @DISPONIBLE
END
GO

--8
/*COMPRUEBA SI QUEDAN CUPOS DISPONIBLES EN ALGUN MODULO*/
GO
CREATE FUNCTION COMPROBANDO_CUPOS_MODULO(@COD_MODULO VARCHAR(15))
RETURNS INT AS
BEGIN
	DECLARE @DISPONIBLE INT 
	IF (EXISTS (SELECT 1 FROM MODULOS WHERE COD_MODULO = @COD_MODULO ))
		IF 1<= (SELECT CUPOS FROM MODULOS WHERE COD_MODULO = @COD_MODULO)
		SET @DISPONIBLE = 1
	ELSE 
		SET @DISPONIBLE = 0
	RETURN @DISPONIBLE
END
GO

--9
/*COMPRUEBA SI APROBO EL ULTIMO MODULO QUE MATRICULO*/
GO
CREATE FUNCTION COMPROBANDO_APROBADO(@CARNET_E VARCHAR(20))
RETURNS INT AS
BEGIN
	DECLARE @PASO INT 
	IF (EXISTS (SELECT 1 FROM CALIFICACIONES_EST WHERE CARNET_ESTUDIANTE = @CARNET_E ))
		IF 70<= (SELECT NOTAS_EST FROM CALIFICACIONES_EST WHERE CARNET_ESTUDIANTE = @CARNET_E)
		SET @PASO = 1
	ELSE 
		SET @PASO = 0
	RETURN @PASO
END
GO
--10
/*VERIFICA LA EXISTENCIA DE UN MODULO ABIERTO*/
GO
CREATE FUNCTION BUSCAR_MODULO_A(@COD_MODULO_A VARCHAR(30))
RETURNS INT AS
BEGIN
	DECLARE @ENCONTRADO INT 
	IF (NOT EXISTS(SELECT 1 FROM MODULOS_ABIERTOS WHERE @COD_MODULO_A = @COD_MODULO_A))
		SET @ENCONTRADO = 0
	ELSE
		SET @ENCONTRADO = 1
	RETURN @ENCONTRADO
END
GO
--11
/*VERIFICA LA EXISTENCIA DE UN GRUPO CON SU MISMO HORARIO Y RETORNA UN ENTERO CON SU DISPONIBILIDAD*/
GO
CREATE FUNCTION COMPROBANDO_GRUPO_HORAS(@ID_GRUPO VARCHAR(15), @HORA_INICIO TIME, @HORA_FIN TIME)
RETURNS INT AS
BEGIN
	DECLARE @ENCONTRADO INT 
	IF (EXISTS(SELECT 1 FROM HORARIOS WHERE ID_GRUPO = @ID_GRUPO AND HORA_INICIO = @HORA_INICIO AND HORA_FINAL = @HORA_FIN))
		SET @ENCONTRADO = 0
	ELSE
		SET @ENCONTRADO = 1
	RETURN @ENCONTRADO
END
GO
-------------------------------------------------------------
/*7 TRIGGER*/
--1
/*CONVIERTE EN NULL EL PROFESOR EN UN MODULO ABIERTO EN CASO DE BORRARSE*/
GO
CREATE TRIGGER BORRADO_PROFESOR_MA
ON PROFESORES AFTER UPDATE
AS
	DECLARE @ID_PROFESOR VARCHAR(20), @BORRADOR INT 
	SELECT @ID_PROFESOR = ID_PROFESOR FROM inserted
	SELECT @BORRADOR = BORRADO_P FROM inserted
			IF(@BORRADOR = 1)
			BEGIN
				UPDATE MODULOS_ABIERTOS SET ID_PROFESOR = NULL WHERE ID_PROFESOR = @ID_PROFESOR
			END
GO

--2
/*CREAMOS UNA TABLA NUEVA QUE GUARDARA LOS DATOS DE LOS PROFESORES ELIMINADOS*/
/*DISPARADOR QUE ACTUARA CADA VEZ QUE SE BORRE UN PROFESOR DEJANDO SU ID COMO UNA REFERENCIA*/
CREATE TABLE HISTORIAL_P(
	FECHA DATE,
	ID_P VARCHAR(4),
	DESCRIPCION VARCHAR(100),
	USUARIO VARCHAR(20)	
)
GO
CREATE TRIGGER TR_PROFESORES 
ON PROFESORES
FOR DELETE
AS
	DECLARE @CODIGO_P VARCHAR(20)

	SELECT @CODIGO_P = ID_PROFESOR FROM deleted

	INSERT INTO HISTORIAL_P(FECHA, ID_P, DESCRIPCION, USUARIO)
		VALUES(GETDATE(), @CODIGO_P, 'PROFESOR BORRADO', SYSTEM_USER)
GO
--3
/*CREAMOS UNA TABLA NUEVA QUE GUARDARA LOS DATOS DE LOS ESTUDIANTES ELIMINADOS*/
/*DISPARADOR QUE ACTUARA CADA VEZ QUE SE BORRE UN ESTUDIANTE DEJANDO SU CARNET COMO UNA REFERENCIA*/
CREATE TABLE HISTORIAL_E(
	FECHA DATE,
	ID_E VARCHAR(4),
	DESCRIPCION VARCHAR(100),
	USUARIO VARCHAR(20)	
)
GO
CREATE TRIGGER TR_ESTUDIANTES 
ON ESTUDIANTES
FOR DELETE
AS
	DECLARE @CARNET_E VARCHAR(20)

	SELECT @CARNET_E = CARNET_ESTUDIANTE FROM deleted

	INSERT INTO HISTORIAL_E(FECHA, ID_E, DESCRIPCION, USUARIO)
		VALUES(GETDATE(), @CARNET_E, 'PROFESOR BORRADO', SYSTEM_USER)
GO
--4
/*ESTE TRIGGER ELIMINA EL PROGRAMA MODULO ABIERTO EN CASO DE QUE EL MODULO SE ELIMINE*/
GO
CREATE TRIGGER TR_MODULOS
ON MODULOS
FOR DELETE
AS
	DECLARE @COD_MODULO VARCHAR(20)

	SELECT @COD_MODULO = COD_MODULO FROM deleted

	IF EXISTS(SELECT 1 FROM MODULOS WHERE (COD_MODULO = @COD_MODULO))
			BEGIN
				DELETE MODULOS_ABIERTOS WHERE @COD_MODULO = COD_MODULO
				END

GO
--5
/*ESTE TRIIGER SE DISPARA EN CASO DE QUE UN GRUPO SEA ELIMINADO TAMBIEN SE ELIMINARA SU HORARIO*/
GO
CREATE TRIGGER TR_GRUPOS
ON GRUPOS
FOR DELETE
AS
	DECLARE @COD_GRUPO VARCHAR(15)

	SELECT @COD_GRUPO = ID_GRUPO FROM deleted

	DELETE HORARIOS WHERE @COD_GRUPO = ID_GRUPO
GO
--6
/*ESTE CONVIERTE BORRA EL DETALLE DE MATRICULA EN CASO DE QUE SE BORRE LA MATRICULA*/
GO
CREATE TRIGGER TR_MATRICULA
ON MATRICULA
FOR DELETE
AS
	DECLARE @NUM_RECIBO INT

	SELECT @NUM_RECIBO = NUM_RECIBO FROM deleted

	DELETE DETALLE_MATRICULA WHERE @NUM_RECIBO = NUM_RECIBO
GO
--7
/*ESTE TRIGGER FUNCIONA EN EL MOMENTO QUE SE BORRA UN LABORATORIO YA ASIGNADO PASANDOLO A NULL EN EL MODULO ABIERTO*/
GO
CREATE TRIGGER BORRADO_LAB_MA
ON LABORATORIOS AFTER UPDATE
AS
	DECLARE @ID_LAB VARCHAR(15) 
	SELECT @ID_LAB = ID_LAB FROM inserted

	UPDATE MODULOS_ABIERTOS SET ID_LAB = NULL WHERE @ID_LAB = ID_LAB
	
GO
-------------------------------------------------------------
/*PROCEDIMIENTO ALMACENADO QUE MATRICULA UN ESTUDIANTE*/
GO
CREATE PROCEDURE SP_MATRICULAR_ESTUDIANTE(@CARNET_E VARCHAR(20),
				 @COD_MODULO_A VARCHAR(20), @MSJ VARCHAR(100), @NUM_RECIBO INT, @ESTADO VARCHAR(5),@COD_MODULO VARCHAR(30), @OBSERVACIONES VARCHAR(150))
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			DECLARE @EXISTENCIA_E INT, @EXISTENCIA_MA INT, @NOTA_ANTERIOR INT

			SET @EXISTENCIA_E = DBO.BUSCAR_ESTUDIANTE(@CARNET_E)
			SET @EXISTENCIA_MA = DBO.BUSCAR_MODULO_A(@COD_MODULO_A)
			SET @NOTA_ANTERIOR = DBO.COMPROBANDO_APROBADO(@NOTA_ANTERIOR)
			SET @COD_MODULO = DBO.COMPROBANDO_CUPOS_MODULO(@COD_MODULO)
			IF (@EXISTENCIA_E = 1 AND @EXISTENCIA_MA = 1 AND @NOTA_ANTERIOR = 1 AND @COD_MODULO = 1 )
				BEGIN
					INSERT INTO MATRICULA(NUM_RECIBO,CARNET_ESTUDIANTE,ESTADO_MATRICULA,OBSERVACIONES_MATRICULA)
					VALUES(@NUM_RECIBO,@CARNET_E,@ESTADO,@OBSERVACIONES)
					INSERT INTO DETALLE_MATRICULA(NUM_RECIBO,MODULO_ABI,ESTADO_DM)
					VALUES(@NUM_RECIBO,@COD_MODULO_A,@ESTADO)
					SET @MSJ = 'EL ESTUDIANTE FUE MATRICULADO SATISFACTORIAMENTE'
				END
			ELSE
				BEGIN 
					SET @MSJ='NO SE LOGRO MATRICULAR EL ESTUDIANTE'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*PROCEDIMIENTO ALMACENADO PARA ABRIR UN MODULO*/
GO
CREATE PROCEDURE SP_ABRIR_MODULO(@COD_MODULO_A VARCHAR(30), @COD_MODULO VARCHAR(15),
				 @ID_PROFESOR VARCHAR(20),@ID_LAB VARCHAR(15), 
				 @MSJ VARCHAR(100),@ID_GRUPO VARCHAR(15),@NOMBRE_GRUPO VARCHAR(20), 
				 @CUPOS INT, @HORA_I TIME, @HORA_F TIME,@TOTAL_DIAS INT,@COD_CER VARCHAR(20),@DURACION_M INT, @FECHA_INICIO DATE)
AS
	BEGIN TRY 
		BEGIN TRANSACTION
		DECLARE @PROFESOR_C INT, @EXISTE_LAB INT, @CHOQUE_H INT,@CHOQUE_L INT, @CHOQUE_HI_HF INT
			SET @PROFESOR_C = DBO.COMPROBANDO_PROF(@ID_PROFESOR,@COD_CER)
			SET @EXISTE_LAB = DBO.BUSCAR_LAB(@ID_LAB)
			SET @CHOQUE_H = DBO.COMPROBANDO_GRUPO_HORAS(@ID_GRUPO, @HORA_I, @HORA_F)

			IF (@PROFESOR_C = 1 AND @EXISTE_LAB = 1 AND @CHOQUE_H = 1)
				BEGIN
					INSERT INTO MODULOS_ABIERTOS(MODULO_ABI,COD_MODULO,ID_PROFESOR,ID_LAB)
					VALUES(@COD_MODULO_A,@COD_MODULO,@ID_PROFESOR,@ID_LAB)
					INSERT INTO GRUPOS(ID_GRUPO,MODULO_ABI,NOMBRE_GRUPO)
					VALUES(@ID_GRUPO,@COD_MODULO_A,@NOMBRE_GRUPO)
					INSERT INTO HORARIOS(ID_GRUPO,HORA_INICIO,HORA_FINAL,TOTAL_DIAS)
					VALUES(@ID_GRUPO,@HORA_I,@HORA_F,@TOTAL_DIAS)
					SET @MSJ = 'SE ABRIO CORRECTAMENTE EL MODULO'
					PRINT 'LA FECHA FINAL DEL MODULO ES: '+CAST(DBO.AVERIGUANDO_FECHA_FINAL(@FECHA_INICIO,@TOTAL_DIAS,@HORA_I,@HORA_F,@DURACION_M) AS VARCHAR)
				END
			ELSE
				BEGIN 
					SET @MSJ='ERROR AL ABRIR EL MODULO'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*FUNCION PARA VERIFICAR LA FECHA EN LA QUE TERMINA UN MODULO ABIERTO*/
GO
CREATE FUNCTION AVERIGUANDO_FECHA_FINAL(@FECHA_INICIO DATE,@TOTAL_DIAS INT, @HORA_I TIME, @HORA_F TIME, @DURACION_M INT)
RETURNS DATE
BEGIN
	DECLARE @HORAS_TRABAJADAS INT, @FECHA_FINAL DATE, @HORAS_TOTALES INT
	SET @HORAS_TOTALES = @DURACION_M
	WHILE @HORAS_TOTALES > 0 
	BEGIN
		SET @HORAS_TRABAJADAS = DATEDIFF(HOUR,@HORA_I,@HORA_F)
		SET @FECHA_FINAL = DATEADD(HOUR,@HORAS_TRABAJADAS,@FECHA_FINAL)
		SET @HORAS_TOTALES = @HORAS_TOTALES - @HORAS_TRABAJADAS
	END
	SET @FECHA_FINAL = DATEADD(DAY,1,@FECHA_FINAL)
	RETURN @FECHA_FINAL
END
GO