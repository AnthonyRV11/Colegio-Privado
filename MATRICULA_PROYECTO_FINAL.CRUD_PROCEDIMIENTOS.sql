USE MATRICULA_PROYECTO
--PROCEDIMIENTOS ALMACENADOS
/*CREAREMOS LOS 4 PROCEDIMIENTOS ALMACENADOS PARA CADA TABLA, CRUD "LEER, ACTUALIZAR, BORRAR Y CREAR"*/

-------------------------------------------------------------------------------------------------------
--CARRERAS

/*CREAR*/
GO
CREATE PROCEDURE SP_INSERTAR_CARRERA(@COD_CARRERA VARCHAR(20),
				 @NOMBREC VARCHAR(20),@GRADO VARCHAR(15), 
				 @CUPOS INT OUT, @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			IF (NOT EXISTS (SELECT 1 FROM CARRERAS WHERE COD_CARRERA = @COD_CARRERA))
				BEGIN
					INSERT INTO CARRERAS(COD_CARRERA,NOMBRE_CARRERA,GRADO,CUPOS)
					VALUES(@COD_CARRERA,@NOMBREC,@GRADO,@CUPOS)
					SELECT @COD_CARRERA = IDENT_CURRENT('CARRERAS')
					SET @MSJ = 'CARRERA INSERTADA SATISFACTORIAMENTE'
				END
			ELSE
				BEGIN 
					SET @MSJ='LA CARRERA YA EXISTE'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*ELIMINAR*/
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_CARRERA(@COD_C VARCHAR(20) OUT,
											  @MSJ_ME VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM CARRERAS WHERE COD_CARRERA = @COD_C))
				BEGIN
					SET @MSJ_ME = 'LA CARRERA NO EXISTE'
				END
			ELSE
				BEGIN 
					DELETE FROM CARRERAS WHERE COD_CARRERA = @COD_C
					SET @MSJ_ME = 'MATERIA ELIMINADA SATISFACTORIAMENTE'
				END
			COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ_ME = ERROR_MESSAGE()
    END CATCH
GO

/*MODIFICAR*/
GO
CREATE PROCEDURE MODIFICAR_CARRERA(@COD_CARRERA VARCHAR(20),
				 @NOMBREC VARCHAR(20),@GRADO VARCHAR(15), 
				 @CUPOS INT OUT, @MSJ VARCHAR(100) OUT)

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM CARRERAS WHERE COD_CARRERA = @COD_CARRERA))
			BEGIN
				UPDATE CARRERAS SET COD_CARRERA = @COD_CARRERA
				SET @MSJ = 'LA MATERIA SE A MODIFICADO'
			END
		ELSE
			SET @MSJ = 'LA CARRERA NO EXISTE ASIGNADA' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*LEER*/
GO
CREATE OR ALTER PROCEDURE MOSTRAR_CARRERA(@COD_CARRERA VARCHAR(20), @MSJ VARCHAR(20))

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM CARRERAS WHERE COD_CARRERA = @COD_CARRERA))
			BEGIN
				SELECT * FROM CARRERAS WHERE COD_CARRERA = @COD_CARRERA
			END
		ELSE
			SET @MSJ = 'LA CARRERA NO EXISTE ASIGNADA' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

-------------------------------------------------------------------------------------------------------
--ESTUDIANTES

/*CREAR*/
GO
CREATE PROCEDURE SP_INSERTAR_ESTUDIANTES(@CARNET VARCHAR(15),
				 @ID_ESTUDIANTE VARCHAR(20),@NOMBRE_E VARCHAR(20),
				 @APELLIDO1 VARCHAR(15),@APELLIDO2 VARCHAR(15),
				 @CORREO_EST VARCHAR(30), @TELEFONO VARCHAR(8),
				 @ESTADO_EST VARCHAR(3), @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			IF (NOT EXISTS (SELECT 1 FROM ESTUDIANTES WHERE CARNET_ESTUDIANTE = @CARNET))
				BEGIN
					INSERT INTO ESTUDIANTES(CARNET_ESTUDIANTE,ID_ESTUDIANTE,NOMBRE,APELLIDO1_EST,APELLIDO2_EST,CORREO_EST,TELEFONO_ESTUDIANTE,ESTADO_ESTUDIANTE)
					VALUES(@CARNET,@ID_ESTUDIANTE,@NOMBRE_E,@APELLIDO1,@APELLIDO2,@CORREO_EST,@TELEFONO,@ESTADO_EST)
					SELECT @CARNET = IDENT_CURRENT('ESTUDIANTES')
					SET @MSJ = 'ESTUDIANTE INSERTADA SATISFACTORIAMENTE'
				END
			ELSE
				BEGIN 
					SET @MSJ='ES ESTUDIANTE YA EXISTE'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*ELIMINAR*/
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_ESTUDIANTE(@CARNET VARCHAR(15) OUT,
											  @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM ESTUDIANTES WHERE CARNET_ESTUDIANTE = @CARNET))
				BEGIN
					SET @MSJ = 'EL ESTUDIANTE NO EXISTE'
				END
			ELSE
				BEGIN 
					DELETE FROM ESTUDIANTES WHERE CARNET_ESTUDIANTE = @CARNET
					SET @MSJ = 'EL ESTUDIANTE FUE BORRADO'
				END
			COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
    END CATCH
GO

/*MODIFICAR*/
GO
CREATE PROCEDURE MODIFICAR_ESTUDIANTE(@CARNET VARCHAR(15),
				 @ID_ESTUDIANTE VARCHAR(20),@NOMBRE_E VARCHAR(20),
				 @APELLIDO1 VARCHAR(15),@APELLIDO2 VARCHAR(15),
				 @CORREO_EST VARCHAR(30), @TELEFONO VARCHAR(8),
				 @ESTADO_EST VARCHAR(3), @MSJ VARCHAR(100) OUT)
AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM ESTUDIANTES WHERE CARNET_ESTUDIANTE = @CARNET))
			BEGIN
				UPDATE ESTUDIANTES SET CARNET_ESTUDIANTE = @CARNET
				SET @MSJ = 'EL ESTUDIANTE SE A MODIFICADO'
			END
		ELSE
			SET @MSJ = 'EL ESTUDIANTE NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*LEER*/
GO
CREATE OR ALTER PROCEDURE MOSTRAR_ESTUDIANTE(@CARNET VARCHAR(20), @MSJ VARCHAR(20))

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM ESTUDIANTES WHERE CARNET_ESTUDIANTE = @CARNET))
			BEGIN
				SELECT * FROM ESTUDIANTES WHERE CARNET_ESTUDIANTE = @CARNET
			END
		ELSE
			SET @MSJ = 'EL ESTUDIANTE NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

-------------------------------------------------------------------------------------------------------
--PROFESORES

/*CREAR*/
GO
CREATE PROCEDURE SP_INSERTAR_PROFESORES(@ID_PROFESOR VARCHAR(20),
				 @NOMBRE_P VARCHAR(15),@APELLIDO1 VARCHAR(15),
				 @APELLIDO2 VARCHAR(15),@CORREO_P VARCHAR(30), 
				 @TELEFONO_P VARCHAR(8),@DIRECCION VARCHAR(150),
				 @ESTADO_P VARCHAR(3),@MSJ VARCHAR(150))
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			IF (NOT EXISTS (SELECT 1 FROM PROFESORES WHERE ID_PROFESOR = @ID_PROFESOR))
				BEGIN
					INSERT INTO PROFESORES(ID_PROFESOR,NOMBRE_PROFESOR,APELLIDO1_PRO,APELLIDO2_PRO,CORREO_PRO,TELEFONO_PRO,DIRECCION_PRO,ESTADO_PRO)
					VALUES(@ID_PROFESOR,@NOMBRE_P,@APELLIDO1,@APELLIDO2,@CORREO_P,@TELEFONO_P,@DIRECCION,@ESTADO_P)
					SELECT @ID_PROFESOR = IDENT_CURRENT('PROFESORES')
					SET @MSJ = 'PROFESOR INSERTADO CORRECTAMENTE'
				END
			ELSE
				BEGIN 
					SET @MSJ='EL PROFESOR YA EXISTE'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*ELIMINAR*/
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_PROFESOR(@ID_PROFESOR VARCHAR(20) OUT,
											  @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM PROFESORES WHERE ID_PROFESOR = @ID_PROFESOR))
				BEGIN
					SET @MSJ = 'EL PROFESOR NO EXISTE'
				END
			ELSE
				BEGIN 
					DELETE FROM PROFESORES WHERE ID_PROFESOR = @ID_PROFESOR
					SET @MSJ = 'EL PROFESOR FUE BORRADO'
				END
			COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
    END CATCH
GO

/*MODIFICAR*/
GO
CREATE PROCEDURE MODIFICAR_PROFESOR(@ID_PROFESOR VARCHAR(20),
				 @NOMBRE_P VARCHAR(15),@APELLIDO1 VARCHAR(15),
				 @APELLIDO2 VARCHAR(15),@CORREO_P VARCHAR(30), 
				 @TELEFONO_P VARCHAR(8),@DIRECCION VARCHAR(150),
				 @ESTADO_P VARCHAR(3),@MSJ VARCHAR(150))
AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM PROFESORES WHERE ID_PROFESOR = @ID_PROFESOR))
			BEGIN
				UPDATE PROFESORES SET ID_PROFESOR = @ID_PROFESOR
				SET @MSJ = 'EL PROFESOR FUE MODIFICADO'
			END
		ELSE
			SET @MSJ = 'EL PROFESOR NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*LEER*/
GO
CREATE OR ALTER PROCEDURE MOSTRAR_PROFESOR(@ID_PROFESOR VARCHAR(20), @MSJ VARCHAR(20))

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM PROFESORES WHERE ID_PROFESOR = @ID_PROFESOR))
			BEGIN
				SELECT * FROM PROFESORES WHERE ID_PROFESOR = @ID_PROFESOR
			END
		ELSE
			SET @MSJ = 'EL PROFESOR NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

-------------------------------------------------------------------------------------------------------
--MODULOS

/*CREAR*/
GO
CREATE PROCEDURE SP_INSERTAR_MODULOS(@COD_MODULO VARCHAR(15),
				 @COD_CARRERA VARCHAR(20),@CUPOS INT,
				 @NOMBRE_MODULO VARCHAR(20),@MONTO DECIMAL(10,2), 
				 @DURACION INT,@MSJ VARCHAR(150))
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			IF (NOT EXISTS (SELECT 1 FROM MODULOS WHERE COD_MODULO = @COD_MODULO))
				BEGIN
					INSERT INTO MODULOS(COD_MODULO,COD_CARRERA,CUPOS,NOMBRE_MODULO,MONTO,DURACION)
					VALUES(@COD_MODULO,@COD_CARRERA,@CUPOS,@NOMBRE_MODULO,@MONTO,@DURACION)
					SELECT @COD_MODULO = IDENT_CURRENT('MODULOS')
					SET @MSJ = 'EL MODULO FUE INSERTADO CORRECTAMENTE'
				END
			ELSE
				BEGIN 
					SET @MSJ='EL MODULO YA EXISTE'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*ELIMINAR*/
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_MODULOS(@COD_MODULO VARCHAR(15) OUT,
											  @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM MODULOS WHERE COD_MODULO = @COD_MODULO))
				BEGIN
					SET @MSJ = 'EL MODULO NO EXISTE'
				END
			ELSE
				BEGIN 
					DELETE FROM MODULOS WHERE COD_MODULO = @COD_MODULO
					SET @MSJ = 'EL MODULO SE ELIMINO CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
    END CATCH
GO

/*MODIFICAR*/
GO
CREATE PROCEDURE MODIFICAR_MODULOS(@COD_MODULO VARCHAR(15),
				 @COD_CARRERA VARCHAR(20),@CUPOS INT,
				 @NOMBRE_MODULO VARCHAR(20),@MONTO DECIMAL(10,2), 
				 @DURACION INT,@MSJ VARCHAR(150))
AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM MODULOS WHERE COD_MODULO = @COD_MODULO))
			BEGIN
				UPDATE MODULOS SET COD_MODULO = @COD_MODULO
				SET @MSJ = 'EL MODULO FUE ACTUALIZADO CORRECTAMENTE'
			END
		ELSE
			SET @MSJ = 'EL MODULO NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*LEER*/
GO
CREATE OR ALTER PROCEDURE MOSTRAR_MODULOS(@COD_MODULO VARCHAR(20), @MSJ VARCHAR(20))

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM MODULOS WHERE COD_MODULO = @COD_MODULO))
			BEGIN
				SELECT * FROM MODULOS WHERE COD_MODULO = @COD_MODULO
			END
		ELSE
			SET @MSJ = 'EL MODULO NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

-------------------------------------------------------------------------------------------------------
--MODULOS ABIERTOS

/*CREAR*/
GO
CREATE PROCEDURE SP_INSERTAR_MODULOS_A(@MODULO_A VARCHAR(30),
				 @COD_MODULO VARCHAR(15), @ID_PROFESOR VARCHAR(20),
				 @ID_LAB VARCHAR(15), @REQUISITOS VARCHAR(150), @MSJ VARCHAR(100))
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			IF (NOT EXISTS (SELECT 1 FROM MODULOS_ABIERTOS WHERE MODULO_ABI = @MODULO_A))
				BEGIN
					INSERT INTO MODULOS_ABIERTOS(MODULO_ABI,COD_MODULO,ID_PROFESOR,ID_LAB,REQUISITOS)
					VALUES(@MODULO_A,@COD_MODULO,@ID_PROFESOR,@ID_LAB,@REQUISITOS)
					SELECT @MODULO_A = IDENT_CURRENT('MODULOS_ABIERTOS')
					SET @MSJ = 'EL MODULO SE ABRIO CORRECTAMENTE'
				END
			ELSE
				BEGIN 
					SET @MSJ='EL MODULO YA ESTA ABIERTO'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*ELIMINAR*/
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_MODULOS_A(@MODULO_A VARCHAR(30) OUT,
											  @MSJ VARCHAR(100) OUT)
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM MODULOS_ABIERTOS WHERE MODULO_ABI = @MODULO_A))
				BEGIN
					SET @MSJ = 'EL MODULO NO ESTA ABIERTO'
				END
			ELSE
				BEGIN 
					DELETE FROM MODULOS_ABIERTOS WHERE MODULO_ABI = @MODULO_A
					SET @MSJ = 'EL MODULO SE CERRO CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
    END CATCH
GO

/*MODIFICAR*/
GO
CREATE PROCEDURE MODIFICAR_MODULOS_A(@MODULO_A VARCHAR(30),
				 @COD_MODULO VARCHAR(15), @ID_PROFESOR VARCHAR(20),
				 @ID_LAB VARCHAR(15), @REQUISITOS VARCHAR(150), @MSJ VARCHAR(100))
AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM MODULOS_ABIERTOS WHERE MODULO_ABI = @MODULO_A))
			BEGIN
				UPDATE MODULOS_ABIERTOS SET MODULO_ABI = @MODULO_A
				SET @MSJ = 'EL MODULO ABIERTO FUE ACTUALIZADO CORRECTAMENTE'
			END
		ELSE
			SET @MSJ = 'EL MODULO NO ESTA ABIERTO' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*LEER*/
GO
CREATE OR ALTER PROCEDURE MOSTRAR_MODULOS_A(@MODULO_ABI VARCHAR(20), @MSJ VARCHAR(20))

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM MODULOS_ABIERTOS WHERE MODULO_ABI = @MODULO_ABI))
			BEGIN
				SELECT * FROM MODULOS_ABIERTOS WHERE MODULO_ABI = @MODULO_ABI
			END
		ELSE
			SET @MSJ = 'EL MODULO NO ESTA ABIERTO' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

-------------------------------------------------------------------------------------------------------
--PAGOS

/*CREAR*/
GO
CREATE PROCEDURE SP_INSERTAR_PAGOS(@CARNET_E VARCHAR(15),
				 @COD_MODULO VARCHAR(15), @MSJ VARCHAR(100))
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			IF (NOT EXISTS (SELECT 1 FROM PAGOS WHERE COD_MODULO = @COD_MODULO AND CARNET_ESTUDIANTE = @CARNET_E) )
				BEGIN
					INSERT INTO PAGOS(CARNET_ESTUDIANTE,COD_MODULO)
					VALUES(@CARNET_E,@COD_MODULO)
					SET @MSJ = 'SE REALIZO EL PAGO CORRECTAMENTE'
				END
			ELSE
				BEGIN 
					SET @MSJ='ERROR AL REALIZAR EL PAGO'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*ELIMINAR*/
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_PAGOS(@CARNET_E VARCHAR(15),
				 @COD_MODULO VARCHAR(15), @MSJ VARCHAR(100))
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM PAGOS WHERE CARNET_ESTUDIANTE = @CARNET_E AND COD_MODULO = @COD_MODULO))
				BEGIN
					SET @MSJ = 'EL PAGO NO EXISTE'
				END
			ELSE
				BEGIN 
					DELETE FROM PAGOS WHERE CARNET_ESTUDIANTE = @CARNET_E AND COD_MODULO = @COD_MODULO
					SET @MSJ = 'EL PAGO SE ELIMINO CORRECTAMENTE'
				END
			COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
    END CATCH
GO

/*MODIFICAR*/
GO
CREATE PROCEDURE MODIFICAR_PAGOS(@CARNET_E VARCHAR(15),
				 @COD_MODULO VARCHAR(15), @MSJ VARCHAR(100))
AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM PAGOS WHERE CARNET_ESTUDIANTE = @CARNET_E AND COD_MODULO = @COD_MODULO ))
			BEGIN
				UPDATE PAGOS SET CARNET_ESTUDIANTE = @CARNET_E 
				UPDATE PAGOS SET COD_MODULO = @COD_MODULO
				SET @MSJ = 'EL PAGO FUE ACTUALIZADO CORRECTAMENTE'
			END
		ELSE
			SET @MSJ = 'EL PAGO NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*LEER*/
GO
CREATE OR ALTER PROCEDURE MOSTRA_PAGOS(@CARNET_E VARCHAR(15),
				 @COD_MODULO VARCHAR(15), @MSJ VARCHAR(100))

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM PAGOS WHERE CARNET_ESTUDIANTE = @CARNET_E AND COD_MODULO = @COD_MODULO ))
			BEGIN
				SELECT * FROM PAGOS WHERE CARNET_ESTUDIANTE = @CARNET_E AND COD_MODULO = @COD_MODULO 
			END
		ELSE
			SET @MSJ = 'EL PAGO NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
-------------------------------------------------------------------------------------------------------
--LABORATORIOS

/*CREAR*/
GO
CREATE PROCEDURE SP_INSERTAR_LAB(@ID_LAB VARCHAR(15),
				 @DISPONIBILIDAD VARCHAR(20), @DIRECCION VARCHAR(150), @MSJ VARCHAR(100))
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			IF (NOT EXISTS (SELECT 1 FROM LABORATORIOS WHERE ID_LAB = @ID_LAB) )
				BEGIN
					INSERT INTO LABORATORIOS(ID_LAB, DISPONIBILIDAD,DIRECCION_LAB)
					VALUES(@ID_LAB, @DISPONIBILIDAD, @DIRECCION)
					SET @MSJ = 'SE CREO EL LABORATORIO CORRECTAMENTE'
				END
			ELSE
				BEGIN 
					SET @MSJ='ERROR AL CREAR EL LABORATORIO'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*ELIMINAR*/
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_LABORATORIO(@ID_LAB VARCHAR(15), @MSJ VARCHAR(100))
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM LABORATORIOS WHERE ID_LAB = @ID_LAB))
				BEGIN
					SET @MSJ = 'EL LABORATORIO NO EXISTE'
				END
			ELSE
				BEGIN 
					DELETE FROM LABORATORIOS WHERE ID_LAB = @ID_LAB
					SET @MSJ = 'EL LABORATORIO FUE ELIMINADO'
				END
			COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
    END CATCH
GO

/*MODIFICAR*/
GO
CREATE PROCEDURE MODIFICAR_LABORATORIO(@ID_LAB VARCHAR(15),
				 @DISPONIBILIDAD VARCHAR(20), @DIRECCION VARCHAR(150), @MSJ VARCHAR(100))
AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM LABORATORIOS WHERE ID_LAB = @ID_LAB))
			BEGIN
				UPDATE LABORATORIOS SET ID_LAB = @ID_LAB 
				SET @MSJ = 'EL LABORATORIO FUE ACTUALIZADO'
			END
		ELSE
			SET @MSJ = 'EL LABORATORIO NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*LEER*/
GO
CREATE OR ALTER PROCEDURE MOSTRA_LABORATORIO(@ID_LAB VARCHAR(15), @MSJ VARCHAR(100))

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM LABORATORIOS WHERE ID_LAB = @ID_LAB))
			BEGIN
				SELECT * FROM LABORATORIOS WHERE ID_LAB = @ID_LAB
			END
		ELSE
			SET @MSJ = 'EL LABORATORIO NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
-------------------------------------------------------------------------------------------------------
--MATRICULA

/*CREAR*/
GO
CREATE PROCEDURE SP_INSERTAR_MATRICULA(@NUM_RECIBO INT,
				 @CARNET VARCHAR(15), @ESTADO_MATRICULA VARCHAR(5),
				 @USER VARCHAR(15), @OBSERVACIONES VARCHAR(150), @MSJ VARCHAR(100))
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			IF (NOT EXISTS (SELECT 1 FROM MATRICULA WHERE NUM_RECIBO = @NUM_RECIBO) )
				BEGIN
					INSERT INTO MATRICULA(NUM_RECIBO, CARNET_ESTUDIANTE, ESTADO_MATRICULA, USUARIO_MATRICULA, OBSERVACIONES_MATRICULA)
					VALUES(@NUM_RECIBO, @CARNET, @ESTADO_MATRICULA, @USER, @OBSERVACIONES)
					SET @MSJ = 'SE MATRICULO CORRECTAMENTE'
				END
			ELSE
				BEGIN 
					SET @MSJ='ERROR AL MATRICULAR'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*ELIMINAR*/
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_MATRICULA(@RECIBO VARCHAR(15), @MSJ VARCHAR(100))
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM MATRICULA WHERE NUM_RECIBO = @RECIBO))
				BEGIN
					SET @MSJ = 'NO EXISTE LA MATRICULA'
				END
			ELSE
				BEGIN 
					DELETE FROM MATRICULA WHERE NUM_RECIBO = @RECIBO
					SET @MSJ = 'LA MATRICULA FUE ELIMINADA'
				END
			COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
    END CATCH
GO

/*MODIFICAR*/
GO
CREATE PROCEDURE MODIFICAR_MATRICULA(@NUM_RECIBO INT,
				 @CARNET VARCHAR(15), @ESTADO_MATRICULA VARCHAR(5),
				 @USER VARCHAR(15), @OBSERVACIONES VARCHAR(150), @MSJ VARCHAR(100))
AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM MATRICULA WHERE NUM_RECIBO = @NUM_RECIBO))
			BEGIN
				UPDATE MATRICULA SET NUM_RECIBO = @NUM_RECIBO 
				SET @MSJ = 'LA MATRICULA FUE ACTUALIZADA'
			END
		ELSE
			SET @MSJ = 'LA MATRICULA NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*LEER*/
GO
CREATE OR ALTER PROCEDURE MOSTRA_MATRICULA(@RECIBO VARCHAR(15), @MSJ VARCHAR(100))

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM MATRICULA WHERE NUM_RECIBO = @RECIBO))
			BEGIN
				SELECT * FROM MATRICULA WHERE NUM_RECIBO = @RECIBO
			END
		ELSE
			SET @MSJ = 'LA MATRICULA NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

-------------------------------------------------------------------------------------------------------
--HORARIOS

/*CREAR*/
GO
CREATE PROCEDURE SP_INSERTAR_HORARIO(@ID_GRUPO VARCHAR(15),@INICIO TIME, @FIN TIME,@DIAS INT,
									 @MSJ VARCHAR(100))
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			IF (NOT EXISTS (SELECT 1 FROM HORARIOS WHERE ID_GRUPO = @ID_GRUPO) )
				BEGIN
					INSERT INTO HORARIOS(ID_GRUPO, HORA_INICIO, HORA_FINAL,TOTAL_DIAS)
					VALUES(@ID_GRUPO, @INICIO, @FIN,@DIAS)
					SET @MSJ = 'SE CREO EL HORARIO CORRECTAMENTE'
				END
			ELSE
				BEGIN 
					SET @MSJ='ERROR AL CREAR EL HORARIO'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*ELIMINAR*/
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_HORARIO(@ID_GRUPO VARCHAR(15), @MSJ VARCHAR(100))
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM HORARIOS WHERE ID_GRUPO = @ID_GRUPO))
				BEGIN
					SET @MSJ = 'NO EXISTE EL HORARIO'
				END
			ELSE
				BEGIN 
					DELETE FROM HORARIOS WHERE ID_GRUPO = @ID_GRUPO
					SET @MSJ = 'EL HORARIO FUE ELIMINADA'
				END
			COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
    END CATCH
GO

/*MODIFICAR*/
GO
CREATE PROCEDURE MODIFICAR_HORARIO(@ID_GRUPO VARCHAR(15),@INICIO TIME, @FIN TIME,@DIAS INT,
									@MSJ VARCHAR(100))
AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM HORARIOS WHERE ID_GRUPO = @ID_GRUPO))
			BEGIN
				UPDATE HORARIOS SET ID_GRUPO = @ID_GRUPO 
				SET @MSJ = 'EL HORARIO FUE ACTUALIZADA'
			END
		ELSE
			SET @MSJ = 'EL HORARIO NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*LEER*/
GO
CREATE OR ALTER PROCEDURE MOSTRA_HORARIOS(@ID_GRUPO VARCHAR(15), @MSJ VARCHAR(100))

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM HORARIOS WHERE ID_GRUPO = @ID_GRUPO))
			BEGIN
				SELECT * FROM HORARIOS WHERE ID_GRUPO = @ID_GRUPO
			END
		ELSE
			SET @MSJ = 'EL HORARIO NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

-------------------------------------------------------------------------------------------------------
--GRUPOS

/*CREAR*/
GO
CREATE PROCEDURE SP_INSERTAR_GRUPOS(@ID_GRUPO VARCHAR(15),@MOD_A VARCHAR(30), @NOMBRE VARCHAR(20),
									 @CUPOS INT, @MSJ VARCHAR(100))
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			IF (NOT EXISTS (SELECT 1 FROM GRUPOS WHERE ID_GRUPO = @ID_GRUPO) )
				BEGIN
					INSERT INTO GRUPOS(ID_GRUPO, MODULO_ABI, NOMBRE_GRUPO, CUPOS)
					VALUES(@ID_GRUPO, @MOD_A, @NOMBRE, @CUPOS)
					SET @MSJ = 'SE CREO EL GRUPO CORRECTAMENTE'
				END
			ELSE
				BEGIN 
					SET @MSJ='ERROR AL CREAR EL GRUPO'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*ELIMINAR*/
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_GRUPOS(@ID_GRUPO VARCHAR(15), @MSJ VARCHAR(100))
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM GRUPOS WHERE ID_GRUPO = @ID_GRUPO))
				BEGIN
					SET @MSJ = 'NO EXISTE EL GRUPO'
				END
			ELSE
				BEGIN 
					DELETE FROM GRUPOS WHERE ID_GRUPO = @ID_GRUPO
					SET @MSJ = 'EL GRUPO FUE ELIMINADA'
				END
			COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
    END CATCH
GO

/*MODIFICAR*/
GO
CREATE PROCEDURE MODIFICAR_GRUPO(@ID_GRUPO VARCHAR(15),@MODULO_A VARCHAR(30), @NOMBRE_GRUPO VARCHAR(20),
									 @CUPOS INT, @MSJ VARCHAR(100))
AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM GRUPOS WHERE ID_GRUPO = @ID_GRUPO))
			BEGIN
				UPDATE HORARIOS SET ID_GRUPO = @ID_GRUPO 
				SET @MSJ = 'EL GRUPO FUE ACTUALIZADO'
			END
		ELSE
			SET @MSJ = 'EL GRUPO NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*LEER*/
GO
CREATE OR ALTER PROCEDURE MOSTRA_GRUPO(@ID_GRUPO VARCHAR(15), @MSJ VARCHAR(100))

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM GRUPOS WHERE ID_GRUPO = @ID_GRUPO))
			BEGIN
				SELECT * FROM GRUPOS WHERE ID_GRUPO = @ID_GRUPO
			END
		ELSE
			SET @MSJ = 'EL GRUPO NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

-------------------------------------------------------------------------------------------------------
--DIAS FERIADOS

/*CREAR*/
GO
CREATE PROCEDURE SP_INSERTAR_DIAS_F(@COD_DIAS_F VARCHAR(15),@FECHA_F DATE, @MSJ VARCHAR(100))
									 
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			IF (NOT EXISTS (SELECT 1 FROM DIAS_FERIADOS WHERE COD_DIAS_FERIADOS = @COD_DIAS_F) )
				BEGIN
					INSERT INTO DIAS_FERIADOS(COD_DIAS_FERIADOS, FECHA_FERIADOS)
					VALUES(@COD_DIAS_F, @FECHA_F)
					SET @MSJ = 'SE CREO EL DIA FERIADO CORRECTAMENTE'
				END
			ELSE
				BEGIN 
					SET @MSJ='ERROR AL INSERTAR EL DIA FERIADO'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*ELIMINAR*/
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_DIAS_F(@COD_DF VARCHAR(15), @MSJ VARCHAR(100))
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM DIAS_FERIADOS WHERE COD_DIAS_FERIADOS = @COD_DF))
				BEGIN
					SET @MSJ = 'NO EXISTE EL DIA FERIADO'
				END
			ELSE
				BEGIN 
					DELETE FROM DIAS_FERIADOS WHERE COD_DIAS_FERIADOS = @COD_DF
					SET @MSJ = 'EL DIA FUE ELIMINADA'
				END
			COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
    END CATCH
GO

/*MODIFICAR*/
GO
CREATE PROCEDURE MODIFICAR_DIAS_F(@COD_DIAS_F VARCHAR(15),@FECHA_F DATE, @MSJ VARCHAR(100))
AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM DIAS_FERIADOS WHERE COD_DIAS_FERIADOS = @COD_DIAS_F))
			BEGIN
				UPDATE DIAS_FERIADOS SET COD_DIAS_FERIADOS = @COD_DIAS_F 
				SET @MSJ = 'EL DIA FUE ACTUALIZADO'
			END
		ELSE
			SET @MSJ = 'EL DIA NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*LEER*/
GO
CREATE OR ALTER PROCEDURE MOSTRA_DIAS_F(@COD_DF VARCHAR(15), @MSJ VARCHAR(100))

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM DIAS_FERIADOS WHERE COD_DIAS_FERIADOS = @COD_DF))
			BEGIN
				SELECT * FROM DIAS_FERIADOS WHERE COD_DIAS_FERIADOS = @COD_DF
			END
		ELSE
			SET @MSJ = 'EL DIA NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

-------------------------------------------------------------------------------------------------------
--DETALLE MATRICULA

/*CREAR*/
GO
CREATE PROCEDURE SP_INSERTAR_DETALLE_M(@NUM_RECIBO INT,@MODULO_ABI VARCHAR(30),
									   @ESTADO VARCHAR(5),@OBSERVACIONES VARCHAR(200),
									   @MSJ VARCHAR(100))
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			IF (NOT EXISTS (SELECT 1 FROM DETALLE_MATRICULA WHERE NUM_RECIBO = @NUM_RECIBO AND MODULO_ABI = @MODULO_ABI) )
				BEGIN
					INSERT INTO DETALLE_MATRICULA(NUM_RECIBO, MODULO_ABI, ESTADO_DM, OBSERVACIONES)
					VALUES(@NUM_RECIBO, @MODULO_ABI, @ESTADO, @OBSERVACIONES)
					SET @MSJ = 'SE CREO EL DETALLE EN MATRICULA CORRECTAMENTE'
				END
			ELSE
				BEGIN 
					SET @MSJ='ERROR AL CREA EL DETALLE DE MATRICULA'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*ELIMINAR*/
GO
CREATE OR ALTER PROCEDURE SP_ELIMINAR_DETALLE_M(@NUM_RECIBO VARCHAR(15),@MODULO_A VARCHAR(30), @MSJ VARCHAR(100))
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM DETALLE_MATRICULA WHERE NUM_RECIBO = @NUM_RECIBO AND MODULO_ABI = @MODULO_A))
				BEGIN
					SET @MSJ = 'NO EXISTE EL DETALLE DE MATRICULA'
				END
			ELSE
				BEGIN 
					DELETE FROM DETALLE_MATRICULA WHERE NUM_RECIBO = @NUM_RECIBO AND MODULO_ABI = @MODULO_A
					SET @MSJ = 'EL DETALLE DE MATRICULA'
				END
			COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
    END CATCH
GO

/*MODIFICAR*/
GO
CREATE PROCEDURE MODIFICAR_DETALLE_M(@NUM_RECIBO INT,@MODULO_ABI VARCHAR(30),
									   @ESTADO VARCHAR(5),@OBSERVACIONES VARCHAR(200),
									   @MSJ VARCHAR(100))
AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM DETALLE_MATRICULA WHERE NUM_RECIBO = @NUM_RECIBO AND MODULO_ABI = @MODULO_ABI))
			BEGIN
				UPDATE DETALLE_MATRICULA SET NUM_RECIBO = @NUM_RECIBO
				UPDATE DETALLE_MATRICULA SET MODULO_ABI = @MODULO_ABI
				SET @MSJ = 'EL DETALLE FUE ACTUALIZADO'
			END
		ELSE
			SET @MSJ = 'EL DETALLE NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*LEER*/
GO
CREATE OR ALTER PROCEDURE MOSTRA_DETALLE(@NUM_RECIBO VARCHAR(15),@MODULO_ABI VARCHAR(30), @MSJ VARCHAR(100))

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM DETALLE_MATRICULA WHERE  NUM_RECIBO = @NUM_RECIBO AND MODULO_ABI = @MODULO_ABI))
			BEGIN
				SELECT * FROM DETALLE_MATRICULA WHERE  NUM_RECIBO = @NUM_RECIBO AND MODULO_ABI = @MODULO_ABI
			END
		ELSE
			SET @MSJ = 'EL DIA NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

-------------------------------------------------------------------------------------------------------
--CERTIFICACIONES

/*CREAR*/
GO
CREATE PROCEDURE SP_INSERTAR_CERTIFICACIONES(@COD_CERTIFICADO VARCHAR(30), @NOMBRE_CERTIFICADO VARCHAR(20),
										     @MSJ VARCHAR(100))
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			IF (NOT EXISTS (SELECT 1 FROM CERTIFICACIONES WHERE COD_CERTIFICACIONES = @COD_CERTIFICADO ) )
				BEGIN
					INSERT INTO CERTIFICACIONES(COD_CERTIFICACIONES, NOMBRE_CERTIFICACIONES)
					VALUES(@COD_CERTIFICADO, @NOMBRE_CERTIFICADO)
					SET @MSJ = 'SE CREO EL CERTIFICADO CORRECTAMENTE'
				END
			ELSE
				BEGIN 
					SET @MSJ='ERROR AL CREA EL CERTIFICADO DE MATRICULA'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*ELIMINAR*/
GO
CREATE OR ALTER PROCEDURE SP_CERTIFICACION(@COD_C VARCHAR(30), @MSJ VARCHAR(100))
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM CERTIFICACIONES WHERE COD_CERTIFICACIONES = @COD_C))
				BEGIN
					SET @MSJ = 'NO EXISTE LA CERTIFICACION'
				END
			ELSE
				BEGIN 
					DELETE FROM CERTIFICACIONES WHERE COD_CERTIFICACIONES = @COD_C
					SET @MSJ = 'SE ELIMINO LA CERTIFICACION'
				END
			COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
    END CATCH
GO

/*MODIFICAR*/
GO
CREATE PROCEDURE MODIFICAR_CERTIFICADO(@COD_CERTIFICADO VARCHAR(30), @NOMBRE_CERTIFICADO VARCHAR(20),
										     @MSJ VARCHAR(100))
AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM CERTIFICACIONES WHERE COD_CERTIFICACIONES = @COD_CERTIFICADO))
			BEGIN
				UPDATE CERTIFICACIONES SET COD_CERTIFICACIONES = @COD_CERTIFICADO
				SET @MSJ = 'LA CERTIFICACION FUE ACTUALIZADO'
			END
		ELSE
			SET @MSJ = 'LA CERTIFICACION NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*LEER*/
GO
CREATE OR ALTER PROCEDURE MOSTRA_CERTIFICADO(@COD_CER VARCHAR(30), @MSJ VARCHAR(100))

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM CERTIFICACIONES WHERE COD_CERTIFICACIONES = @COD_CER))
			BEGIN
				SELECT * FROM CERTIFICACIONES WHERE  COD_CERTIFICACIONES = @COD_CER 
			END
		ELSE
			SET @MSJ = 'EL CERTIFICADO NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

-------------------------------------------------------------------------------------------------------
--CERTIFICACIONES PROFESORES

/*CREAR*/
GO
CREATE PROCEDURE SP_INSERTAR_CERTIFICACIONES_PROF(@COD_CERTIFICADO VARCHAR(30), @ID_PROFESOR VARCHAR(20),
										     @MSJ VARCHAR(100))
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			IF (NOT EXISTS (SELECT 1 FROM CERTIFICADOS_PROF WHERE COD_CERTIFICACIONES = @COD_CERTIFICADO AND ID_PROFESOR = @ID_PROFESOR))
				BEGIN
					INSERT INTO CERTIFICACIONES(COD_CERTIFICACIONES, NOMBRE_CERTIFICACIONES)
					VALUES(@COD_CERTIFICADO,@ID_PROFESOR )
					SET @MSJ = 'SE ENLAZO EL CERTIFICADO CORRECTAMENTE'
				END
			ELSE
				BEGIN 
					SET @MSJ='ERROR AL ENLAZAR EL CERTIFICADO DE MATRICULA'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*ELIMINAR*/
GO
CREATE OR ALTER PROCEDURE SP_CERTIFICACION_PROF(@COD_C VARCHAR(30),@ID_PROFESOR VARCHAR(20), @MSJ VARCHAR(100))
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM CERTIFICADOS_PROF WHERE COD_CERTIFICACIONES = @COD_C AND ID_PROFESOR = @ID_PROFESOR))
				BEGIN
					SET @MSJ = 'NO EXISTE LA CERTIFICACION O EL PROFESOR'
				END
			ELSE
				BEGIN 
					DELETE FROM CERTIFICADOS_PROF WHERE COD_CERTIFICACIONES = @COD_C AND ID_PROFESOR = @ID_PROFESOR
					SET @MSJ = 'SE ELIMINO LA CERTIFICACION PARA EL PROFESOR'
				END
			COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
    END CATCH
GO

/*MODIFICAR*/
GO
CREATE PROCEDURE MODIFICAR_CERTIFICADO_PROF(@COD_CERTIFICADO VARCHAR(30), @ID_PROFESOR VARCHAR(20),
										     @MSJ VARCHAR(100))
AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM CERTIFICADOS_PROF WHERE COD_CERTIFICACIONES = @COD_CERTIFICADO AND ID_PROFESOR = @ID_PROFESOR))
			BEGIN
				UPDATE CERTIFICADOS_PROF SET COD_CERTIFICACIONES = @COD_CERTIFICADO  
				UPDATE CERTIFICADOS_PROF SET ID_PROFESOR = @ID_PROFESOR
				SET @MSJ = 'LA CERTIFICACION PARA EL PROFESOR FUE ACTUALIZADO'
			END
		ELSE
			SET @MSJ = 'LA CERTIFICACION O EL PROFESOR NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*LEER*/
GO
CREATE OR ALTER PROCEDURE MOSTRA_CERTIFICADO_PRO(@COD_CER VARCHAR(30),@ID_PRO VARCHAR(20) ,@MSJ VARCHAR(100))

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM CERTIFICADOS_PROF WHERE COD_CERTIFICACIONES = @COD_CER AND ID_PROFESOR = @ID_PRO))
			BEGIN
				SELECT * FROM CERTIFICACIONES_PROF WHERE COD_CERTIFICACIONES = @COD_CER AND ID_PROFESOR = @ID_PRO
			END
		ELSE
			SET @MSJ = 'EL CERTIFICADO PARA ESE PROFESOR NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

-------------------------------------------------------------------------------------------------------
--CALIFICACIONES DE ESTUDIANTES

/*CREAR*/
GO
CREATE PROCEDURE SP_CALIFICACIONES_EST(@NOTAS_EST INT, @CARNET VARCHAR(15),
									   @COD_MODULO VARCHAR(15),@MSJ VARCHAR(100))
AS
	BEGIN TRY 
		BEGIN TRANSACTION
			IF (NOT EXISTS (SELECT 1 FROM CALIFICACIONES_EST WHERE CARNET_ESTUDIANTE = @CARNET AND COD_MODULO = @COD_MODULO ) )
				BEGIN
					INSERT INTO CALIFICACIONES_EST(NOTAS_EST, CARNET_ESTUDIANTE, COD_MODULO)
					VALUES(@NOTAS_EST, @CARNET, @COD_MODULO)
					SET @MSJ = 'SE INSERTO CORRECTAMENTE LA CALIFICACION'
				END
			ELSE
				BEGIN 
					SET @MSJ='ERROR AL INSERTAR LA CALIFICACION'
		 END
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*ELIMINAR*/
GO
CREATE OR ALTER PROCEDURE SP_CALIFICACIONES(@CARNET VARCHAR(15),@COD_MODULO VARCHAR(15), @MSJ VARCHAR(100))
AS
	BEGIN TRY
		BEGIN TRANSACTION
			IF(NOT EXISTS(SELECT 1 FROM CALIFICACIONES_EST WHERE CARNET_ESTUDIANTE = @CARNET AND COD_MODULO = @COD_MODULO))
				BEGIN
					SET @MSJ = 'NO EXISTE LA CALIFICACION'
				END
			ELSE
				BEGIN 
					DELETE FROM CALIFICACIONES_EST WHERE CARNET_ESTUDIANTE = @CARNET AND COD_MODULO = @COD_MODULO
					SET @MSJ = 'SE ELIMINO LA NOTA'
				END
			COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
    END CATCH
GO

/*MODIFICAR*/
GO
CREATE PROCEDURE MODIFICAR_CALIFICACION(@NOTAS_EST INT, @CARNET VARCHAR(15),
									   @COD_MODULO VARCHAR(15),@MSJ VARCHAR(100))
AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM CALIFICACIONES_EST WHERE CARNET_ESTUDIANTE = @CARNET AND COD_MODULO = @COD_MODULO))
			BEGIN
				UPDATE CALIFICACIONES_EST SET CARNET_ESTUDIANTE = @CARNET 
				UPDATE CALIFICACIONES_EST SET COD_MODULO = @COD_MODULO 
				SET @MSJ = 'LA CALIFICACION FUE ACTUALIZADA'
			END
		ELSE
			SET @MSJ = 'LA CALIFICACION NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO

/*LEER*/
GO
CREATE OR ALTER PROCEDURE MOSTRA_CALIFICACION(@CARNET VARCHAR(30),@COD_M VARCHAR,@MSJ VARCHAR(100))

AS 
	BEGIN TRY
		BEGIN TRANSACTION 
		  IF(EXISTS (SELECT 1 FROM CALIFICACIONES_EST WHERE CARNET_ESTUDIANTE = @CARNET AND COD_MODULO = @COD_M))
			BEGIN
				SELECT * FROM CALIFICACIONES_EST WHERE CARNET_ESTUDIANTE = @CARNET AND COD_MODULO = @COD_M
			END
		ELSE
			SET @MSJ = 'LA CALIFICACION NO EXISTE' 

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		SET @MSJ = ERROR_MESSAGE()
	END CATCH
GO
-------------------------------------------------------------------------------------------------------